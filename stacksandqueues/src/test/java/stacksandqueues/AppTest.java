/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stacksandqueues;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {

    /*  REQUIRED TESTS FOR LAB 10
    Can successfully push onto a stack ---------------------------- COMPLETE
    Can successfully push multiple values onto a stack ------------ COMPLETE
    Can successfully pop off the stack ---------------------------- COMPLETE
    Can successfully empty a stack after multiple pops ------------ COMPLETE
    Can successfully peek the next item on the stack -------------- COMPLETE
    Can successfully instantiate an empty stack ------------------- COMPLETE
    Can successfully enqueue into a queue ------------------------- COMPLETE
    Can successfully enqueue multiple values into a queue --------- COMPLETE
    Can successfully dequeue out of a queue the expected value ---- COMPLETE
    Can successfully peek into a queue, seeing the expected value - COMPLETE
    Can successfully empty a queue after multiple dequeues -------- COMPLETE
    Can successfully instantiate an empty queue ------------------- COMPLETE
     */

    Stack<Integer> intStack;
    Queue<Integer> intQueue;
    Integer actual;
    Integer expected;

    @Before
    public void initialize_Stack_And_Queue_For_Tests() {

        intStack = new Stack<>();
        intStack.push(1);
        intStack.push(2);
        intStack.push(3);
        intStack.push(4);
        intStack.push(5);
        intStack.push(6);
        intStack.push(7);
        intStack.push(8);
        intStack.push(9);
        intStack.push(10);

        intQueue = new Queue<>();
        intQueue.enqueue(1);
        intQueue.enqueue(2);
        intQueue.enqueue(3);
        intQueue.enqueue(4);
        intQueue.enqueue(5);
        intQueue.enqueue(6);
        intQueue.enqueue(7);
        intQueue.enqueue(8);
        intQueue.enqueue(9);
        intQueue.enqueue(10);
    }

    /*
                    STACK TESTS
    */
    @Test
    public void testStack_PushOnStack() {
        assertEquals(10, (int)intStack.pop());
        intStack.push(1000);
        assertEquals(1000, (int)intStack.pop());

        intStack.push(999);
        assertEquals(999, (int)intStack.pop());
    }

    @Test
    public void testStack_PushMultipleValuesOntoStack() {
        intStack.push(11);
        intStack.push(12);
        intStack.push(13);
        intStack.push(14);
        intStack.push(15);
        intStack.push(16);
        intStack.push(17);
        intStack.push(18);
        intStack.push(19);
        intStack.push(20);

        assertEquals(20, (int)intStack.pop());
        assertEquals(19, (int)intStack.pop());
        assertEquals(18, (int)intStack.pop());
        assertEquals(17, (int)intStack.pop());
        assertEquals(16, (int)intStack.pop());
        assertEquals(15, (int)intStack.pop());
        assertEquals(14, (int)intStack.pop());
        assertEquals(13, (int)intStack.pop());
        assertEquals(12, (int)intStack.pop());
        assertEquals(11, (int)intStack.pop());
    }

    @Test
    public void testStack_PopValuesOffStackAndCheckEmpty() {
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();
        intStack.pop();

        assertTrue(intStack.isEmpty());
    }

    @Test
    public void testStack_Peek() {
        actual = intStack.peek();
        expected = 10;
        assertEquals(expected, actual);

        intStack.pop();

        actual = intStack.peek();
        expected = 9;
        assertEquals(expected, actual);
    }

    @Test
    public void testStack_EmptyStack() {

        Stack<Integer> emptyIntStack = new Stack<>();

        assertTrue(emptyIntStack.isEmpty());
    }


    /*
                    QUEUE TESTS
    */
    @Test
    public void testQueue_Enqueue() {
        intQueue.enqueue(11);
        Integer actual = intQueue.back.value;
        Integer expected = 11;
        assertEquals(expected, actual);

        intQueue.enqueue(12);
        actual = intQueue.back.value;
        expected = 12;
        assertEquals(expected, actual);

    }

    @Test
    public void testQueue_EnqueueMultipleValues() {
        actual = intQueue.peek();
        expected = 1;
        assertEquals(expected, actual);

        intQueue.dequeue(); // dequeue value 1
        intQueue.dequeue(); // dequeue value 2
        intQueue.dequeue(); // dequeue value 3

        actual = intQueue.peek();
        expected = 4;
        assertEquals(expected, actual);
    }

    @Test
    public void testQueue_Dequeue() {
        actual = intQueue.dequeue();
        expected = 1;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 2;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 3;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 4;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 5;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 6;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 7;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 8;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 9;
        assertEquals(actual, expected);

        actual = intQueue.dequeue();
        expected = 10;
        assertEquals(actual, expected);


    }

    @Test
    public void testQueue_Peek() {
        actual = intQueue.peek();
        expected = 1;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 2;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 3;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 4;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 5;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 6;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 7;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 8;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 9;
        assertEquals(actual, expected);

        intQueue.dequeue();
        actual = intQueue.peek();
        expected = 10;
        assertEquals(actual, expected);
    }

    @Test
    public void testQueue_EmptyAfterDequeue() {
        intQueue.dequeue(); // remove node with value of 1
        intQueue.dequeue(); // remove node with value of 2
        intQueue.dequeue(); // remove node with value of 3
        intQueue.dequeue(); // remove node with value of 4
        intQueue.dequeue(); // remove node with value of 5
        intQueue.dequeue(); // remove node with value of 6
        intQueue.dequeue(); // remove node with value of 7
        intQueue.dequeue(); // remove node with value of 8
        intQueue.dequeue(); // remove node with value of 9
        intQueue.dequeue(); // remove node with value of 10
        assertTrue(intQueue.isEmpty());
    }

    @Test
    public void testQueue_EmptyInitializedQueue() {
        Queue<Integer> emptyIntQueue = new Queue<>();
        assertTrue(emptyIntQueue.isEmpty());
    }


}
